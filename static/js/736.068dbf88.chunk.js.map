{"version":3,"file":"static/js/736.068dbf88.chunk.js","mappings":"8LAYaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,0LClBWC,EAAQT,EAAAA,GAAAA,IAAH,qJAKC,SAAAU,GAAC,OAAIA,EAAEC,MAAMC,MAAMC,MAAlB,IACD,SAAAH,GAAC,OAAIA,EAAEC,MAAMT,MAAM,EAAlB,IAGPY,EAAOd,EAAAA,GAAAA,EAAH,sEACA,SAAAU,GAAC,OAAIA,EAAEC,MAAMI,YAAYC,IAAxB,IACC,SAAAN,GAAC,OAAIA,EAAEC,MAAMT,MAAM,EAAlB,IAGPe,EAAYjB,EAAAA,GAAAA,EAAH,uCACX,SAAAU,GAAC,OAAIA,EAAEC,MAAMO,OAAOC,SAAnB,I,SCqCZ,EA/Ca,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,IAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,gHAEGC,EAAAA,EAAAA,IAAkBJ,GAFrB,gBAEZF,EAFY,EAEZA,KACRC,EAAQD,GAHY,sDAKd,IAAIO,MAAM,KAAMC,SALF,yDAAH,qDAQrBH,GACD,GAAE,CAACH,IAECF,EAEL,OACE,SAACtB,EAAA,EAAD,CACE+B,GAAG,KACHC,QAAQ,OACRC,QAAS,EACTC,oBAAoB,wCACpBC,GAAI,EACJC,UAAU,sBANZ,SAQGd,EAAKe,OAAS,EACXf,EAAKgB,KAAI,SAAAC,GAAK,OACZ,2BACE,SAAC7B,EAAD,CACE8B,IACED,EAAME,aAAN,0CACuCF,EAAME,cACzCC,EAENC,IAAKJ,EAAMK,QAEb,SAAC7B,EAAD,UAAOwB,EAAMK,QACb,UAAC1B,EAAD,yBAAuBqB,EAAMM,eAVtBN,EAAMO,GADH,IAcd,4CAGT,C,yLClDYC,E,QAAeC,EAAAA,OAAa,CACvCC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,sGACJL,EAAaM,IAAI,qBADb,uBACnBC,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,qDAKbC,EAAc,mCAAG,WAAM/B,GAAN,yFACLuB,EAAaM,IAAb,iBAA2B7B,IADtB,uBACpB8B,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKd1B,EAAiB,mCAAG,WAAMJ,GAAN,yFACRuB,EAAaM,IAAb,iBAA2B7B,EAA3B,aADQ,uBACvB8B,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBE,EAAiB,mCAAG,WAAMhC,GAAN,yFACRuB,EAAaM,IAAb,iBAA2B7B,EAA3B,aADQ,uBACvB8B,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBG,EAAgB,mCAAG,WAAMC,GAAN,yFACPX,EAAaM,IAAb,8BAAwCK,IADjC,uBACtBJ,EADsB,EACtBA,KADsB,SAEjBA,EAFiB,mFAAH,qD","sources":["Box.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/movies-api.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position\n);\n","import styled from 'styled-components';\n\nexport const Photo = styled.img`\n  width: 100%;\n  max-width: 200px;\n  height: 250px;\n  object-fit: cover;\n  border-radius: ${p => p.theme.radii.normal};\n  margin-bottom: ${p => p.theme.space[3]}px;\n`;\n\nexport const Name = styled.p`\n  font-weight: ${p => p.theme.fontWeights.bold};\n  margin-bottom: ${p => p.theme.space[2]}px;\n`;\n\nexport const Character = styled.p`\n  color: ${p => p.theme.colors.lighttext};\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from 'services/movies-api';\nimport { Box } from 'Box';\nimport noPhoto from '../../images/no_image.jpg';\nimport { Photo, Name, Character } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieCredits = async () => {\n      try {\n        const { cast } = await fetchMovieCredits(movieId);\n        setCast(cast);\n      } catch (error) {\n        throw new Error(error.message);\n      }\n    };\n    getMovieCredits();\n  }, [movieId]);\n\n  if (!cast) return;\n\n  return (\n    <Box\n      as=\"ul\"\n      display=\"grid\"\n      gridGap={5}\n      gridTemplateColumns=\"repeat(auto-fit, minmax(150px, auto))\"\n      pt={5}\n      borderTop=\"1px solid lightgrey\"\n    >\n      {cast.length > 0\n        ? cast.map(actor => (\n            <li key={actor.id}>\n              <Photo\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${actor.profile_path}`\n                    : noPhoto\n                }\n                alt={actor.name}\n              />\n              <Name>{actor.name}</Name>\n              <Character>Character: {actor.character}</Character>\n            </li>\n          ))\n        : 'There is no information about the actors'}\n    </Box>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nexport const movieService = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'bb66d39a29feb698f032f2613a49cacc',\n  },\n});\n\nexport const fetchTrending = async () => {\n  const { data } = await movieService.get('/trending/all/day');\n  return data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const { data } = await movieService.get(`/movie/${movieId}`);\n  return data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const { data } = await movieService.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await movieService.get(`/movie/${movieId}/reviews`);\n  return data;\n};\n\nexport const fetchMovieByName = async query => {\n  const { data } = await movieService.get(`/search/movie?query=${query}`);\n  return await data;\n};\n"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","Photo","p","theme","radii","normal","Name","fontWeights","bold","Character","colors","lighttext","useState","cast","setCast","movieId","useParams","useEffect","getMovieCredits","fetchMovieCredits","Error","message","as","display","gridGap","gridTemplateColumns","pt","borderTop","length","map","actor","src","profile_path","noPhoto","alt","name","character","id","movieService","axios","baseURL","params","api_key","fetchTrending","get","data","fetchMovieById","fetchMovieReviews","fetchMovieByName","query"],"sourceRoot":""}